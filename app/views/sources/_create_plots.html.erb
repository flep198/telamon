<!--creates plot with input data array (columns: MJD, Value, minValue, maxValue, true/false)-->
<script>


//make sure export button works

function download_table_as_csv(table_id, separator = ',') {
    // Select rows from table_id
    var rows = document.querySelectorAll('table#' + table_id + ' tr');
    // Construct csv
    var csv = [];
    for (var i = 0; i < rows.length; i++) {
        var row = [], cols = rows[i].querySelectorAll('td, th');
        for (var j = 0; j < cols.length; j++) {
            // Clean innertext to remove multiple spaces and jumpline (break csv)
            var data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ')
            // Escape double-quote with double-double-quote (see https://stackoverflow.com/questions/17808511/properly-escape-a-double-quote-in-csv)
            data = data.replace(/"/g, '""');
            // Push escaped string
            row.push('"' + data + '"');
        }
        csv.push(row.join(separator));
    }
    var csv_string = csv.join('\n');
    // Download it
    var filename = table_id + '.csv';
    var link = document.createElement('a');
    link.style.display = 'none';
    link.setAttribute('target', '_blank');
    link.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv_string));
    link.setAttribute('download', filename);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

window.onload=function(){


  // make sure export button works
  if(!!document.getElementById("export_button")){
        var table_name = document.getElementById("export_button").dataset.table;
        document.getElementById("export_button").addEventListener("click", function(){download_table_as_csv(table_name)});
  }


  //make tables sortable
    const getCellValue = (tr, idx) => tr.children[idx].innerText || tr.children[idx].textContent;

    const comparer = (idx, asc) => (a, b) => ((v1, v2) => 
        v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ? v1 - v2 : v1.toString().localeCompare(v2)
        )(getCellValue(asc ? a : b, idx), getCellValue(asc ? b : a, idx));

    document.querySelectorAll('th').forEach(th => th.addEventListener('click', (() => {
        const table = th.closest('table');
        const tbody = table.querySelector('tbody');
        Array.from(tbody.querySelectorAll('tr'))
            .sort(comparer(Array.from(th.parentNode.children).indexOf(th), this.asc = !this.asc))
            .forEach(tr => tbody.appendChild(tr) );
    })));


  

  //LIGHTCURVE PLOT

  freq_array = []; // this array saves what freqs will be plotted later
  aver_mode_array = []; //this array saves data to plot in aver mode

  //query database
  <% @source.frequencies.distinct.order(:freq_ghz).each do |freq| %>
    <% @freq_id=freq.id %>
    <% @data = Result.where(:source_id => @source.id, :frequency_id => @freq_id).map { |r| [r.mjd,r.value_jy,r.error_jy]} %>
    <% @data=@data.sort_by(&:first) %>

      //print out values for freq
    var lc_data<%=@freq_id%> = {
      x: <%= @data.map {|r| r[0]}%>,
      y: <%= @data.map {|r| r[1]}%>,
      error_y: {
        type: "data",
        array: <%= @data.map {|r| r[2]}%>,
        visible: true
      },
      type: "scatter",
      <% if !user_signed_in?%>
      hoverinfo: 'none',
      <%end%>
      name: "<%=Frequency.find(@freq_id).freq_ghz.to_s%> GHz"
    };

    freq_array.push(lc_data<%=@freq_id%>);

  <% end %>

  var layoutLC = {
    title: "<%=@source.j2000_name%>",

    xaxis: {
      title: {
        text: 'MJD',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },

    yaxis: {
      title: {
        text: 'Flux Density [Jy]',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },

  };

  //averaged lightcurves
  <% lc7=getAverageLightCurve(@source,36,44) %>
  var aver_lc7 = {
    x: <%= lc7[0] %>,
    y: <%= lc7[1] %>,
    error_y: {
        type: "data",
        array: <%= lc7[2] %>,
        visible: true
      },
    type: "scatter",
    <% if !user_signed_in?%>
      hoverinfo: 'none',
    <%end%>
    name: "Aver 7mm"

  };
  aver_mode_array.push(aver_lc7);

  <% lc14=getAverageLightCurve(@source,19,25) %>
  var aver_lc14 = {
    x: <%= lc14[0] %>,
    y: <%= lc14[1] %>,
    error_y: {
        type: "data",
        array: <%= lc14[2] %>,
        visible: true
      },
    type: "scatter",
    <% if !user_signed_in?%>
      hoverinfo: 'none',
    <%end%>
    name: "Aver 14mm",

  };
  aver_mode_array.push(aver_lc14);

  <% lc20=getAverageLightCurve(@source,14,17) %>
  var aver_lc20 = {
    x: <%= lc20[0] %>,
    y: <%= lc20[1] %>,
    error_y: {
        type: "data",
        array: <%= lc20[2] %>,
        visible: true
      },
    type: "scatter",
    <% if !user_signed_in?%>
      hoverinfo: 'none',
    <%end%>
    name: "Aver 20mm"
  };
  aver_mode_array.push(aver_lc20);

  <% lc45=getAverageLightCurve(@source,5,10) %>
  var aver_lc45 = {
    x: <%= lc45[0] %>,
    y: <%= lc45[1] %>,
    error_y: {
        type: "data",
        array: <%= lc45[2] %>,
        visible: true
      },
    type: "scatter",
    <% if !user_signed_in?%>
      hoverinfo: 'none',
    <%end%>
    name: "Aver 45mm"
  };
  aver_mode_array.push(aver_lc45);

  Plotly.newPlot("lightcurve",aver_mode_array,layoutLC);

  //SPECTRUM PLOT

  epoch_array = []; // this array saves what epochs will be plotted later

  //query database
  <% @source.epoches.distinct.order(:date).reverse_order.each do |epoch| %>
    <% @epoch_id=epoch.id %>
    <% @data = Result.where(:source_id => @source.id, :epoch_id => @epoch_id).map { |r| [Frequency.find(r.frequency_id).freq_ghz,r.value_jy,r.error_jy]} %>
    <% @data = @data.sort_by(&:first) %>

    //print out values for epoch
    var spec_data<%=epoch.id%> = {
      x: <%= @data.map {|r| r[0]}%>,
      y: <%= @data.map {|r| r[1]}%>,
      error_y: {
        type: "data",
        array: <%= @data.map {|r| r[2]}%>,
        visible: true
      },
      type: "scatter",
      <% if !user_signed_in?%> //show hoverinfo only if user is signed in
      hoverinfo: 'none',
      <%end%>
      name: "<%=Epoch.find(@epoch_id).date.to_s%>"
    };

    epoch_array.push(spec_data<%=@epoch_id%>);

  <% end %>

  //lin-lin layout
  var spec_layout = {
    title: "<%=@source.j2000_name%>",

    xaxis: {
      title: {
        text: 'Frequency [GHz]',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },

    yaxis: {
      title: {
        text: 'Flux Density [Jy]',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },
  };

  var spec_layout_log = {
    title: "<%=@source.j2000_name%>",

    xaxis: {
      type: 'log',
      title: {
        text: 'Frequency [GHz]',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },

    yaxis: {
      type: 'log',
      title: {
        text: 'Flux Density [Jy]',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },
  };



  Plotly.newPlot("spectrum",epoch_array,spec_layout);


  <% if user_signed_in? %>

  //3D Surface Plot  

  <% @data3d = Result.where(:source_id => @source.id).map { |r| [Frequency.find(r.frequency_id).freq_ghz,r.value_jy,r.mjd]} %>

  var data_3d_plot_scatter = {
    x: <%= @data3d.map {|r| r[0]}%>, 
    y: <%= @data3d.map {|r| r[2]}%>, 
    z: <%= @data3d.map {|r| r[1]}%>,
    mode: 'markers',
    marker: {
      color: 'rgb(127, 127, 127)',
      size: 2,
      symbol: 'circle',
      line: {
      color: 'rgb(204, 204, 204)',
      width: 1},
      opacity: 0.8},

    type: 'scatter3d'};


    <% @surface_data=getSurfacePlotData(@source) %>

    var data_3d_plot_surface = {
      x: <%= @surface_data[0]%>, 
      y: <%= @surface_data[1]%>, 
      z: <%= @surface_data[2]%>,
      type: 'surface',
    };


    var layout_3d_plot_surface = {
      scene: {
        xaxis:{title: 'Frequency [GHz]'},
        yaxis:{title: 'MJD [days]'},
        zaxis:{title: 'Flux Density [Jy]'},
      },

      margin: {
        l: 20,
        r: 20,
        b: 20,
        t: 20,
      },

    }; 

    Plotly.newPlot('3dplot', [data_3d_plot_surface,data_3d_plot_scatter], layout_3d_plot_surface);

  <%end%>
  

  <% if user_signed_in? %>
  //Spectral Index Plot

    var speci_data = {
      x: <%= getSpectralIndices(@source)[0]%>,
      y: <%= getSpectralIndices(@source)[1]%>,
      error_y: {
        type: "data",
        array: <%= getSpectralIndices(@source)[2] %>,
        visible: true
      },
      type: "scatter",
      <% if !user_signed_in?%> //show hoverinfo only if user is signed in
      hoverinfo: 'none',
      <%end%>
      name: "Spectral Index"
    };


  var layout = {
    title: "<%=@source.j2000_name%>",

    xaxis: {
      title: {
        text: 'MJD',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },

    yaxis: {
      title: {
        text: 'Spectral Index',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },
  };



  Plotly.newPlot("speci",[speci_data],layout);

//Fractional Polarization Plot

freq_array_pol_frac=[]

<% @source.frequencies.distinct.order(:freq_ghz).each do |freq| %>
    <% @freq_id=freq.id %>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.pol_frac,r.pol_frac_err]} %>
    <% @data=@data.sort_by(&:first) %>

      //print out values for freq
    var pol_frac_data<%=@freq_id%> = {
      x: <%= @data.map {|r| r[0]}%>,
      y: <%= @data.map {|r| r[1]}%>,
      error_y: {
        type: "data",
        array: <%= @data.map {|r| r[2]}%>,
        visible: true
      },
      type: "scatter",
      <% if !user_signed_in?%>
      hoverinfo: 'none',
      <%end%>
      name: "<%=Frequency.find(@freq_id).freq_ghz.to_s%> GHz"
    };

    freq_array_pol_frac.push(pol_frac_data<%=@freq_id%>);

  <% end %>

  var layout_pol_frac = {
    title: "<%=@source.j2000_name%>",

    xaxis: {
      title: {
        text: 'MJD',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },

    yaxis: {
      title: {
        text: 'Polarization Fraction [%]',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },
  };



  Plotly.newPlot("pol_frac_plot",freq_array_pol_frac,layout_pol_frac);

//Fractional Polarization Plot
freq_array_evpa=[]

<% @source.frequencies.distinct.order(:freq_ghz).each do |freq| %>
    <% @freq_id=freq.id %>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.evpa,r.evpa_err]} %>
    <% @data=@data.sort_by(&:first) %>
    <%= @data %>
      //print out values for freq
    var evpa_data<%=@freq_id%> = {
      r: <%= @data.map {|r| r[0]}%>,
      t: <%= @data.map {|r| r[1]/180*3.1415*2}%>,
      type: "scatterpolar",
      <% if !user_signed_in?%>
      hoverinfo: 'none',
      <%end%>
      name: "<%=Frequency.find(@freq_id).freq_ghz.to_s%> GHz"
    };

    freq_array_evpa.push(evpa_data<%=@freq_id%>);

  <% end %>

  var layout_evpa = {
    showlegend: true,
    title: "<%=@source.j2000_name%>"

  };

  Plotly.newPlot("evpa_plot",freq_array_evpa,layout_evpa);


//this is needed to update the lightcurve and spectrums plot using a switch
  var checkboxAver = document.getElementById("averSwitch");

  function updateLCplot(){
    var aver = checkboxAver.checked;

    if (aver){
      Plotly.newPlot("lightcurve",aver_mode_array,layoutLC);
    } else {
      Plotly.newPlot("lightcurve",freq_array,layoutLC);
    };
  };

  checkboxAver.addEventListener('change',function(){updateLCplot()});
  updateLCplot();

  <% end %>

  var checkboxLog = document.getElementById("logSwitch");

  function updateSpecplot(){
    var log = checkboxLog.checked;

    if (log){
      Plotly.newPlot("spectrum",epoch_array,spec_layout_log);
    } else {
      Plotly.newPlot("spectrum",epoch_array,spec_layout);
    };
  };
  
  checkboxLog.addEventListener('change',function(){updateSpecplot()});
  
  updateSpecplot();
 

}
</script>