<!--creates plot with input data array (columns: MJD, Value, minValue, maxValue, true/false)-->
<script>


//make sure export button works

function download_table_as_csv(table_id, separator = ',') {
    // Select rows from table_id
    var rows = document.querySelectorAll('table#' + table_id + ' tr');
    // Construct csv
    var csv = [];
    for (var i = 0; i < rows.length; i++) {
        var row = [], cols = rows[i].querySelectorAll('td, th');
        for (var j = 0; j < cols.length; j++) {
            // Clean innertext to remove multiple spaces and jumpline (break csv)
            var data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ')
            // Escape double-quote with double-double-quote (see https://stackoverflow.com/questions/17808511/properly-escape-a-double-quote-in-csv)
            data = data.replace(/"/g, '""');
            // Push escaped string
            row.push('"' + data + '"');
        }
        csv.push(row.join(separator));
    }
    var csv_string = csv.join('\n');
    // Download it
    var filename = table_id + '.csv';
    var link = document.createElement('a');
    link.style.display = 'none';
    link.setAttribute('target', '_blank');
    link.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv_string));
    link.setAttribute('download', filename);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

window.onload=function(){


  // make sure export button works
  if(!!document.getElementById("export_button")){
        var table_name = document.getElementById("export_button").dataset.table;
        document.getElementById("export_button").addEventListener("click", function(){download_table_as_csv(table_name)});
  }


  //make tables sortable
    const getCellValue = (tr, idx) => tr.children[idx].innerText || tr.children[idx].textContent;

    const comparer = (idx, asc) => (a, b) => ((v1, v2) => 
        v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ? v1 - v2 : v1.toString().localeCompare(v2)
        )(getCellValue(asc ? a : b, idx), getCellValue(asc ? b : a, idx));

    document.querySelectorAll('th').forEach(th => th.addEventListener('click', (() => {
        const table = th.closest('table');
        const tbody = table.querySelector('tbody');
        Array.from(tbody.querySelectorAll('tr'))
            .sort(comparer(Array.from(th.parentNode.children).indexOf(th), this.asc = !this.asc))
            .forEach(tr => tbody.appendChild(tr) );
    })));


  

  //LIGHTCURVE PLOT

  freq_array = []; // this array saves what freqs will be plotted later
  aver_mode_array = []; //this array saves data to plot in aver mode
  atca_freq_array = []; //this array saves freqs of telamon + atca
  atca_aver_mode_array = [];

  //query TELAMON database
  <% @source.frequencies.distinct.order(:freq_ghz).each do |freq| %>
    <% @freq_id=freq.id %>
    <% @data = Result.where(:source_id => @source.id, :frequency_id => @freq_id).map { |r| [r.mjd,r.value_jy,r.error_jy]} %>
    <% @data=@data.sort_by(&:first) %>

    //print out values for freq
    var lc_data<%=@freq_id%> = {
      x: <%= @data.map {|r| r[0]}%>,
      y: <%= @data.map {|r| r[1]}%>,
      error_y: {
        type: "data",
        array: <%= @data.map {|r| r[2]}%>,
      },
      type: "scatter",
      xaxis:'x1',
      yaxis: 'y',
      legendgroup: 'lc_<%=@freq_id%>',
      <% if !user_signed_in?%>
      hoverinfo: 'none',
      <%end%>
      name: "<%=Frequency.find(@freq_id).freq_ghz.to_s%> GHz"
    };

    var lc_data<%=@freq_id%>_secondX = {
      x: <%= @data.map {|r| (Date.jd(r[0]+2400000.5).year.to_f+Date.jd(r[0]+2400000.5).yday.to_f/365)}%>,
      y: lc_data<%=@freq_id%>.y,
      type: lc_data<%=@freq_id%>.type,
      xaxis:'x2',
      yaxis:'y',
      legendgroup: 'lc_<%=@freq_id%>',
      hoverinfo: 'none',
      opacity: 0.0,
      showlegend: false
    };

    freq_array.push(lc_data<%=@freq_id%>);
    freq_array.push(lc_data<%=@freq_id%>_secondX);
    atca_freq_array.push(lc_data<%=@freq_id%>);
    atca_freq_array.push(lc_data<%=@freq_id%>_secondX);

  <% end %>

  var layoutLC = {
    xaxis: {
      title: {
        text: 'MJD',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },

    xaxis2: {
      title: {
        text: 'Decimal Year',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
      side: 'top',
      overlaying: 'x1',
      tickformat: ".1f"
    },

    yaxis: {
      title: {
        text: 'Flux Density [Jy]',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },

  };

  //averaged lightcurves
  <% lc7=ReturnAverageLightCurve(@source,"7mm") %>
  var aver_lc7 = {
    x: <%= lc7[0].map {|r| r}%>,
    y: <%= lc7[1] %>,
    error_y: {
        type: "data",
        array: <%= lc7[2] %>,
        visible: true
      },
    type: "scatter",
    xaxis: 'x1',
    legendgroup: 'lc7',
    <% if !user_signed_in?%>
      hoverinfo: 'none',
    <%end%>
    name: "Aver 7mm"

  };

  var aver_lc7_secondX = {
      x: <%= lc7[0].map {|r| Date.jd(r+2400000.5).year.to_f+Date.jd(r+2400000.5).yday.to_f/365}%>,
      y: aver_lc7.y,
      type: aver_lc7.type,
      xaxis:'x2',
      yaxis:'y',
      hoverinfo: 'none',
      legendgroup: 'lc7',
      opacity: 0.0,
      showlegend: false
  };

  aver_mode_array.push(aver_lc7_secondX);
  atca_aver_mode_array.push(aver_lc7_secondX);
  aver_mode_array.push(aver_lc7);
  atca_aver_mode_array.push(aver_lc7);

  <% lc14=ReturnAverageLightCurve(@source,"14mm") %>
  var aver_lc14 = {
    x: <%= lc14[0].map {|r| r}%>,
    y: <%= lc14[1] %>,
    error_y: {
        type: "data",
        array: <%= lc14[2] %>,
        visible: true
      },
    legendgroup: 'lc14',
    type: "scatter",
    xaxis: 'x1',
    <% if !user_signed_in?%>
      hoverinfo: 'none',
    <%end%>
    name: "Aver 14mm",

  };

  var aver_lc14_secondX = {
      x: <%= lc14[0].map {|r| (Date.jd(r+2400000.5).year.to_f+Date.jd(r+2400000.5).yday.to_f/365)} %>,
      y: aver_lc14.y,
      type: aver_lc14.type,
      xaxis:'x2',
      yaxis:'y',
      legendgroup: 'lc14',
      hoverinfo: 'none',
      opacity: 0.0,
      showlegend: false
  };

  aver_mode_array.push(aver_lc14_secondX);
  atca_aver_mode_array.push(aver_lc14_secondX);
  aver_mode_array.push(aver_lc14);
  atca_aver_mode_array.push(aver_lc14);

  <% lc20=ReturnAverageLightCurve(@source,"20mm") %>
  var aver_lc20 = {
    x: <%= lc20[0].map {|r| r}%>,
    y: <%= lc20[1] %>,
    error_y: {
        type: "data",
        array: <%= lc20[2] %>,
        visible: true
      },
    type: "scatter",
    xaxis: 'x1',
    legendgroup: 'lc20',
    visible: true,
    <% if !user_signed_in?%>
      hoverinfo: 'none',
    <%end%>
    name: "Aver 20mm"
  };


  var aver_lc20_secondX = {
      x: <%= lc20[0].map {|r| (Date.jd(r+2400000.5).year.to_f+Date.jd(r+2400000.5).yday.to_f/365)} %>,
      y: aver_lc20.y,
      type: aver_lc20.type,
      xaxis:'x2',
      yaxis:'y',
      legendgroup: 'lc20',
      hoverinfo: 'none',
      opacity: 0.0,
      showlegend: false
  };

  aver_mode_array.push(aver_lc20_secondX);
  atca_aver_mode_array.push(aver_lc20_secondX);
  aver_mode_array.push(aver_lc20);
  atca_aver_mode_array.push(aver_lc20);

  <% lc45=ReturnAverageLightCurve(@source,"45mm") %>
  var aver_lc45 = {
    x: <%= lc45[0].map {|r| r}%>,
    y: <%= lc45[1] %>,
    error_y: {
        type: "data",
        array: <%= lc45[2] %>,
        visible: true
      },
    type: "scatter",
    legendgroup: 'lc45',
    xaxis: 'x1',
    <% if !user_signed_in?%>
      hoverinfo: 'none',
    <%end%>
    name: "Aver 45mm"
  };

  var aver_lc45_secondX = {
      x: <%= lc45[0].map {|r| (Date.jd(r+2400000.5).year.to_f+Date.jd(r+2400000.5).yday.to_f/365)} %>,
      y: aver_lc45.y,
      type: aver_lc45.type,
      xaxis:'x2',
      yaxis:'y',
      legendgroup: 'lc45',
      hoverinfo: 'none',
      opacity: 0.0,
      showlegend: false
  };

  aver_mode_array.push(aver_lc45_secondX);
  atca_aver_mode_array.push(aver_lc45_secondX);
  aver_mode_array.push(aver_lc45);
  atca_aver_mode_array.push(aver_lc45);


  //ATCA lightcurves

  <% @source_frequencies=@source.atca_results.map {|r| r.frequency_ghz}.uniq %>
  <% @source_frequencies.sort.each do |freq_ghz| %>
    <% @data = AtcaResult.where(:source_id => @source.id, :frequency_ghz => freq_ghz).map { |r| [r.mjd,r.value_jy,r.error_jy]} %>
    <% @data=@data.sort_by(&:first) %>

      //print out values for freq
    var lc_data_atca<%=freq_ghz.to_s.gsub(".","")%> = {
      x: <%= @data.map {|r| r[0]}%>,
      y: <%= @data.map {|r| r[1]}%>,
      error_y: {
        type: "data",
        array: <%= @data.map {|r| r[2]}%>,
        visible: true
      },
      type: "scatter",
      xaxis: 'x1',
      legendgroup: 'lc_atca<%=freq_ghz.to_s.gsub(".","")%>',
      <% if !user_signed_in?%>
      hoverinfo: 'none',
      <%end%>
      name: "<%=freq_ghz.to_s%> GHz"
    };

    var lc_data_atca<%=freq_ghz.to_s.gsub(".","")%>_secondX = {
      x: <%= @data.map {|r| (Date.jd(r[0]+2400000.5).year.to_f+Date.jd(r[0]+2400000.5).yday.to_f/365)}%>,
      y: lc_data_atca<%=freq_ghz.to_s.gsub(".","")%>.y,
      type: lc_data_atca<%=freq_ghz.to_s.gsub(".","")%>.type,
      xaxis:'x2',
      yaxis:'y',
      hoverinfo: 'none',
      legendgroup: 'lc_atca<%=freq_ghz.to_s.gsub(".","")%>',
      opacity: 0.0,
      showlegend: false
  };

  atca_freq_array.push(lc_data_atca<%=freq_ghz.to_s.gsub(".","")%>_secondX);
  atca_freq_array.push(lc_data_atca<%=freq_ghz.to_s.gsub(".","")%>);

  <% end %>

  //average atca lightcurves

  //averaged lightcurves
  <% lc3atca=getAverageATCALightCurve(@source,84,96) %>
  var aver_lc3atca = {
    x: <%= lc3atca[0] %>,
    y: <%= lc3atca[1] %>,
    error_y: {
        type: "data",
        array: <%= lc3atca[2] %>,
        visible: true
      },
    type: "scatter",
    xaxis: 'x1',
    mode: 'markers',
    legendgroup: 'lc_atca_aver3',
    <% if !user_signed_in?%>
      hoverinfo: 'none',
    <%end%>
    name: "Aver 3mm ATCA"

  };

  var aver_lc3atca_secondX = {
      x: <%= lc3atca[0].map {|r| (Date.jd(r+2400000.5).year.to_f+Date.jd(r+2400000.5).yday.to_f/365)} %>,
      y: aver_lc3atca.y,
      type: aver_lc3atca.type,
      xaxis:'x2',
      yaxis:'y',
      legendgroup: 'lc_atca_aver3',
      hoverinfo: 'none',
      opacity: 0.0,
      showlegend: false
  };

  atca_aver_mode_array.push(aver_lc3atca_secondX);
  atca_aver_mode_array.push(aver_lc3atca);

  <% lc7atca=getAverageATCALightCurve(@source,32,45.5) %>
  var aver_lc7atca = {
    x: <%= lc7atca[0] %>,
    y: <%= lc7atca[1] %>,
    error_y: {
        type: "data",
        array: <%= lc7atca[2] %>,
        visible: true
      },
    type: "scatter",
    legendgroup: 'lc_atca_aver7',
    mode: 'markers',
    xaxis: 'x1',
    <% if !user_signed_in?%>
      hoverinfo: 'none',
    <%end%>
    name: "Aver 7mm ATCA"

  };

  var aver_lc7atca_secondX = {
      x: <%= lc7atca[0].map {|r| (Date.jd(r+2400000.5).year.to_f+Date.jd(r+2400000.5).yday.to_f/365)} %>,
      y: aver_lc7atca.y,
      type: aver_lc7atca.type,
      xaxis:'x2',
      yaxis:'y',
      legendgroup: 'lc_atca_aver7',
      hoverinfo: 'none',
      opacity: 0.0,
      showlegend: false
  };

  atca_aver_mode_array.push(aver_lc7atca_secondX);
  atca_aver_mode_array.push(aver_lc7atca);

  <% lc15atca=getAverageATCALightCurve(@source,16.5,21.5) %>
  var aver_lc15atca = {
    x: <%= lc15atca[0] %>,
    y: <%= lc15atca[1] %>,
    error_y: {
        type: "data",
        array: <%= lc15atca[2] %>,
        visible: true
      },
    type: "scatter",
    mode: 'markers',
    legendgroup: 'lc_atca_aver15',
    xaxis: 'x1',
    <% if !user_signed_in?%>
      hoverinfo: 'none',
    <%end%>
    name: "Aver 15mm ATCA",

  };

  var aver_lc15atca_secondX = {
      x: <%= lc15atca[0].map {|r| (Date.jd(r+2400000.5).year.to_f+Date.jd(r+2400000.5).yday.to_f/365)} %>,
      y: aver_lc15atca.y,
      type: aver_lc15atca.type,
      xaxis:'x2',
      yaxis:'y',
      legendgroup: 'lc_atca_aver15',
      hoverinfo: 'none',
      opacity: 0.0,
      showlegend: false
  };

  atca_aver_mode_array.push(aver_lc15atca_secondX);
  atca_aver_mode_array.push(aver_lc15atca);

  <% lc40atca=getAverageATCALightCurve(@source,4.8,9.2) %>
  var aver_lc40atca = {
    x: <%= lc40atca[0] %>,
    y: <%= lc40atca[1] %>,
    error_y: {
        type: "data",
        array: <%= lc40atca[2] %>,
        visible: true
      },
    type: "scatter",
    mode: 'markers',
    legendgroup: 'lc_atca_aver40',
    xaxis: 'x1',
    <% if !user_signed_in?%>
      hoverinfo: 'none',
    <%end%>
    name: "Aver 4cm ATCA"
  };

  var aver_lc40atca_secondX = {
      x: <%= lc40atca[0].map {|r| (Date.jd(r+2400000.5).year.to_f+Date.jd(r+2400000.5).yday.to_f/365)} %>,
      y: aver_lc40atca.y,
      type: aver_lc40atca.type,
      xaxis:'x2',
      yaxis:'y',
      hoverinfo: 'none',
      legendgroup: 'lc_atca_aver40',
      opacity: 0.0,
      showlegend: false
  };

  atca_aver_mode_array.push(aver_lc40atca_secondX);
  atca_aver_mode_array.push(aver_lc40atca);

  <% lc160atca=getAverageATCALightCurve(@source,1.3,2.4) %>
  var aver_lc160atca = {
    x: <%= lc160atca[0] %>,
    y: <%= lc160atca[1] %>,
    error_y: {
        type: "data",
        array: <%= lc160atca[2] %>,
        visible: true
      },
    type: "scatter",
    mode: 'markers',
    xaxis: 'x1',
    legendgroup: 'lc_atca_aver160',
    <% if !user_signed_in?%>
      hoverinfo: 'none',
    <%end%>
    name: "Aver 16cm ATCA"
  };

  var aver_lc160atca_secondX = {
      x: <%= lc160atca[0].map {|r| (Date.jd(r+2400000.5).year.to_f+Date.jd(r+2400000.5).yday.to_f/365)} %>,
      y: aver_lc160atca.y,
      type: aver_lc160atca.type,
      xaxis:'x2',
      yaxis:'y',
      legendgroup: 'lc_atca_aver160',
      hoverinfo: 'none',
      opacity: 0.0,
      showlegend: false
  };

  atca_aver_mode_array.push(aver_lc160atca_secondX);
  atca_aver_mode_array.push(aver_lc160atca);
  

  Plotly.newPlot("lightcurve",aver_mode_array,layoutLC);

  //SPECTRUM PLOT

  epoch_array = []; // this array saves what epochs will be plotted later

  //query database
  <% @source.epoches.distinct.order(:date).reverse_order.each do |epoch| %>
    <% @epoch_id=epoch.id %>
    <% @data = Result.where(:source_id => @source.id, :epoch_id => @epoch_id).map { |r| [Frequency.find(r.frequency_id).freq_ghz,r.value_jy,r.error_jy]} %>
    <% @data = @data.sort_by(&:first) %>

    //print out values for epoch
    var spec_data<%=epoch.id%> = {
      x: <%= @data.map {|r| r[0]}%>,
      y: <%= @data.map {|r| r[1]}%>,
      error_y: {
        type: "data",
        array: <%= @data.map {|r| r[2]}%>,
        visible: true
      },
      type: "scatter",
      <% if !user_signed_in?%> //show hoverinfo only if user is signed in
      hoverinfo: 'none',
      <%end%>
      name: "<%=Epoch.find(@epoch_id).date.to_s%>"
    };

    epoch_array.push(spec_data<%=@epoch_id%>);

  <% end %>

  //lin-lin layout
  var spec_layout = {
    title: "<%=@source.j2000_name%>",

    xaxis: {
      title: {
        text: 'Frequency [GHz]',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },

    yaxis: {
      title: {
        text: 'Flux Density [Jy]',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },
  };

  var spec_layout_log = {
    title: "<%=@source.j2000_name%>",

    xaxis: {
      type: 'log',
      title: {
        text: 'Frequency [GHz]',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },

    yaxis: {
      type: 'log',
      title: {
        text: 'Flux Density [Jy]',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },
  };



  Plotly.newPlot("spectrum",epoch_array,spec_layout);


  <% if user_signed_in? %>

  //3D Surface Plot  

  <% @data3d = Result.where(:source_id => @source.id).map { |r| [Frequency.find(r.frequency_id).freq_ghz,r.value_jy,r.mjd]} %>

  var data_3d_plot_scatter = {
    x: <%= @data3d.map {|r| r[0]}%>, 
    y: <%= @data3d.map {|r| r[2]}%>, 
    z: <%= @data3d.map {|r| r[1]}%>,
    mode: 'markers',
    marker: {
      color: 'rgb(127, 127, 127)',
      size: 2,
      symbol: 'circle',
      line: {
      color: 'rgb(204, 204, 204)',
      width: 1},
      opacity: 0.8},

    type: 'scatter3d'};


    <% @surface_data=getSurfacePlotData(@source) %>

    var data_3d_plot_surface = {
      x: <%= @surface_data[0]%>, 
      y: <%= @surface_data[1]%>, 
      z: <%= @surface_data[2]%>,
      type: 'surface',
    };


    var layout_3d_plot_surface = {
      scene: {
        xaxis:{title: 'Frequency [GHz]'},
        yaxis:{title: 'MJD [days]'},
        zaxis:{title: 'Flux Density [Jy]'},
      },

      margin: {
        l: 20,
        r: 20,
        b: 20,
        t: 20,
      },

    }; 

    Plotly.newPlot('3dplot', [data_3d_plot_surface,data_3d_plot_scatter], layout_3d_plot_surface);

  <%end%>
  

  <% if user_signed_in? %>
  //Spectral Index Plot

    var speci_data = {
      <% specind_info=getSpectralIndices(@source)%>
      x: <%= specind_info[0] %>,
      y: <%= specind_info[1] %>,
      error_y: {
        type: "data",
        array: <%= specind_info[2] %>,
        visible: true
      },
      type: "scatter",
      <% if !user_signed_in?%> //show hoverinfo only if user is signed in
      hoverinfo: 'none',
      <%end%>
      name: "Spectral Index"
    };


  var layout = {
    title: "<%=@source.j2000_name%>",

    xaxis: {
      title: {
        text: 'MJD',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },

    yaxis: {
      title: {
        text: 'Spectral Index',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },
  };



  Plotly.newPlot("speci",[speci_data],layout);

//Fractional Polarization Plot

freq_array_pol_frac=[]

<% @source.frequencies.distinct.order(:freq_ghz).each do |freq| %>
    <% @freq_id=freq.id %>
    <% if freq.freq_ghz == 6.3 %>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_6_3ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.pol_frac,r.pol_frac_err]} %>
    <% elsif freq.freq_ghz == 8.3 %>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_8_3ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.pol_frac,r.pol_frac_err]} %>
    <% elsif freq.freq_ghz == 14.0 %>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_14_0ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.pol_frac,r.pol_frac_err]} %>
    <% elsif freq.freq_ghz == 17.0 %>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_17_0ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.pol_frac,r.pol_frac_err]} %>
    <% elsif freq.freq_ghz == 19.0 %>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_19_0ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.pol_frac,r.pol_frac_err]} %>
    <% elsif freq.freq_ghz == 21.4 %>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_21_4ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.pol_frac,r.pol_frac_err]} %>
    <% elsif freq.freq_ghz == 36.0 %>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_36_0ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.pol_frac,r.pol_frac_err]} %>
    <% elsif freq.freq_ghz == 39.0 %>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_39_0ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.pol_frac,r.pol_frac_err]} %>
    <% else %>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.pol_frac,r.pol_frac_err]} %>
    <% end %>
    <% @data=@data.sort_by(&:first) %>

      //print out values for freq
    var pol_frac_data<%=@freq_id%> = {
      x: <%= @data.map {|r| r[0]}%>,
      y: <%= @data.map {|r| r[1]}%>,
      error_y: {
        type: "data",
        array: <%= @data.map {|r| r[2]}%>,
        visible: true
      },
      type: "scatter",
      <% if !user_signed_in?%>
      hoverinfo: 'none',
      <%end%>
      name: "<%=Frequency.find(@freq_id).freq_ghz.to_s%> GHz"
    };

    freq_array_pol_frac.push(pol_frac_data<%=@freq_id%>);

  <% end %>

  var layout_pol_frac = {
    title: "<%=@source.j2000_name%>",

    xaxis: {
      title: {
        text: 'MJD',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },

    yaxis: {
      title: {
        text: 'Polarization Fraction [%]',
        font: {
          family: 'Courier New, monospace',
          size: 18,
          color: '#7f7f7f'
        }
      },
    },
  };



  Plotly.newPlot("pol_frac_plot",freq_array_pol_frac,layout_pol_frac);

//EVPA Polarization Plot
freq_array_evpa=[]

<% @source.frequencies.distinct.order(:freq_ghz).each do |freq| %>
    <% @freq_id=freq.id %>
    <% if freq.freq_ghz== 6.3%>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_6_3ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.evpa,r.evpa_err]} %>
    <% elsif freq.freq_ghz== 8.3%>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_8_3ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.evpa,r.evpa_err]} %>
    <% elsif freq.freq_ghz== 14.0%>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_14_0ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.evpa,r.evpa_err]} %>
    <% elsif freq.freq_ghz== 17.0%>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_17_0ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.evpa,r.evpa_err]} %>
    <% elsif freq.freq_ghz== 19.0%>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_19_0ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.evpa,r.evpa_err]} %>
    <% elsif freq.freq_ghz== 21.4%>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_21_4ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.evpa,r.evpa_err]} %>
    <% elsif freq.freq_ghz== 36.0%>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_36_0ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.evpa,r.evpa_err]} %>
    <% elsif freq.freq_ghz== 39.0%>
    <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id, :epoch => {:showpol_39_0ghz => true}).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.evpa,r.evpa_err]} %>
    <% else %>
      <% @data = Result.joins(:epoch).where(:source_id => @source.id, :frequency_id => @freq_id).where.not(pol_frac: [nil]).map { |r| [r.mjd,r.evpa,r.evpa_err]} %>
    <% end %>
    <% @data=@data.sort_by(&:first) %>
      //print out values for freq
    var evpa_data<%=@freq_id%> = {
      r: <%= @data.map {|r| r[0]}%>,
      theta: <%= @data.map {|r| r[1]*2}%>,
      type: "scatterpolar",
      <% if !user_signed_in?%>
      hoverinfo: 'none',
      <%end%>
      name: "<%=Frequency.find(@freq_id).freq_ghz.to_s%> GHz"
    };

    freq_array_evpa.push(evpa_data<%=@freq_id%>);

  <% end %>

  var layout_evpa = {
    showlegend: true,
    title: "<%=@source.j2000_name%>",
    polar: {

    radialaxis: {

      visible: true,

      <% mjds = Result.joins(:epoch).where(:source_id => @source.id).where.not(pol_frac: [nil]).map{|r| r.mjd}%>

      range: [<%=mjds.min%>,<%=mjds.max%>]

    }

  },

  };

  Plotly.newPlot("evpa_plot",freq_array_evpa,layout_evpa);


//this is needed to update the lightcurve and spectrums plot using a switch
  var checkboxAver = document.getElementById("averSwitch");

  function updateLCplot(){
    var aver = checkboxAver.checked;

    if (aver){
      if (checkboxAtca.checked){
        Plotly.newPlot("lightcurve",atca_aver_mode_array,layoutLC);
      } else {
        Plotly.newPlot("lightcurve",aver_mode_array,layoutLC);
      }
    } else {
      if (checkboxAtca.checked) {
        Plotly.newPlot("lightcurve",atca_freq_array,layoutLC);
      } else {
        Plotly.newPlot("lightcurve",freq_array,layoutLC);
      }
    };
  };

  checkboxAver.addEventListener('change',function(){updateLCplot()});

  var checkboxAtca=document.getElementById("atcaSwitch");
  checkboxAtca.addEventListener('change',function(){updateLCplot()});

  updateLCplot();

  <% end %>

  var checkboxLog = document.getElementById("logSwitch");

  function updateSpecplot(){
    var log = checkboxLog.checked;

    if (log){
      Plotly.newPlot("spectrum",epoch_array,spec_layout_log);
    } else {
      Plotly.newPlot("spectrum",epoch_array,spec_layout);
    };
  };
  
  checkboxLog.addEventListener('change',function(){updateSpecplot()});

  
  updateSpecplot();
}

</script>