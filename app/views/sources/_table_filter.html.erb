<!--creates interactive filters-->
<script>
function download_table_as_csv(table_id, separator = ',') {
    // Select rows from table_id
    var rows = document.querySelectorAll('table#' + table_id + ' tr');
    // Construct csv
    var csv = [];
    for (var i = 0; i < rows.length; i++) {
        var row = [], cols = rows[i].querySelectorAll('td, th');
        for (var j = 0; j < cols.length; j++) {
            // Clean innertext to remove multiple spaces and jumpline (break csv)
            var data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ')
            // Escape double-quote with double-double-quote (see https://stackoverflow.com/questions/17808511/properly-escape-a-double-quote-in-csv)
            data = data.replace(/"/g, '""');
            // Push escaped string
            row.push('"' + data + '"');
        }
        csv.push(row.join(separator));
    }
    var csv_string = csv.join('\n');
    // Download it
    var filename = table_id + '.csv';
    var link = document.createElement('a');
    link.style.display = 'none';
    link.setAttribute('target', '_blank');
    link.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv_string));
    link.setAttribute('download', filename);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

window.onload=function(){

    if(!!document.getElementById("export_button")){
        var table_name = document.getElementById("export_button").dataset.table;
        document.getElementById("export_button").addEventListener("click", function(){download_table_as_csv(table_name)});
    }



    //make tables sortable
    const getCellValue = (tr, idx) => tr.children[idx].innerText || tr.children[idx].textContent;

    const comparer = (idx, asc) => (a, b) => ((v1, v2) => 
        v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ? v1 - v2 : v1.toString().localeCompare(v2)
        )(getCellValue(asc ? a : b, idx), getCellValue(asc ? b : a, idx));

    document.querySelectorAll('th').forEach(th => th.addEventListener('click', (() => {
        const table = th.closest('table');
        const tbody = table.querySelector('tbody');
        Array.from(tbody.querySelectorAll('tr'))
            .sort(comparer(Array.from(th.parentNode.children).indexOf(th), this.asc = !this.asc))
            .forEach(tr => tbody.appendChild(tr) );
    })));

    
    //readout all form elements

    var checkboxSample1 = document.querySelector("input[name=Sample1]");
    var checkboxSample2 = document.querySelector("input[name=Sample2]");
    var checkboxBadWeather = document.querySelector("input[name=BadWeather]");
    var checkboxCalibrator = document.querySelector("input[name=Calibrator]");
    var checkboxOther = document.getElementById("Other");
    var selectNeutrino = document.getElementById("SelectNeutrino");
    var selectDropped = document.getElementById("SelectDropped");
    var searchJ2000 = document.getElementById("SearchJ2000");
    var low_lim_20_form = document.getElementById("20mm_lower_limit");
    var up_lim_20_form = document.getElementById("20mm_upper_limit");
    var low_lim_14_form = document.getElementById("14mm_lower_limit");
    var up_lim_14_form = document.getElementById("14mm_upper_limit");
    var low_lim_7_form = document.getElementById("7mm_lower_limit");
    var up_lim_7_form = document.getElementById("7mm_upper_limit");

    //old table filter function
    function CategoryFilterTable(checkbox,CategoryName){
        var table, tr, td, i, txtValue;
        table = document.getElementById("sourceTable");
        tr = table.getElementsByTagName("tr");
        
        for (i=0; i<tr.length; i++){
            td = tr[i].getElementsByTagName("td")[3];
            if (td) {
                txtValue = td.textContent || td.innerText;
                    if (!checkbox.checked && txtValue.includes(CategoryName)){
                        tr[i].style.display="none";
                    } else {
                        if(txtValue.includes(CategoryName)){
                            tr[i].style.display=""; 
                        }                        
                    };          
            };
        };
    };

    //this function updates the table according to the set filters
    function updateTable(){
        //read out filter form
        var sample1 = checkboxSample1.checked;
        var sample2 = checkboxSample2.checked;
        var badweather = checkboxBadWeather.checked;
        var calibrator = checkboxCalibrator.checked;
        var other = checkboxOther.checked;
        var neutrino_value = selectNeutrino.value;
        var dropped_value = selectDropped.value;

        var low_lim_20 = parseFloat(low_lim_20_form.value);
        var up_lim_20 = parseFloat(up_lim_20_form.value);
        var low_lim_14 = parseFloat(low_lim_14_form.value);
        var up_lim_14 = parseFloat(up_lim_14_form.value);
        var low_lim_7 = parseFloat(low_lim_7_form.value);
        var up_lim_7 = parseFloat(up_lim_7_form.value);       

        var search_j2000_name = searchJ2000.value;

        //go through table and decide whether to show row or not
        var table, tr, td, i, txtValue;
        table = document.getElementById("sourceTable");
        tr = table.getElementsByTagName("tr");

        for (i=1;i<tr.length;i++){
            td = tr[i].getElementsByTagName("td");
            var j2000_name = td[0];
            var alt_name = td[1];
            var source_class = td[2];
            var category = td[3];
            var aver_20mm = td[4];
            var aver_14mm = td[5];
            var aver_7mm = td[6];
            var redshift = td[7];
            var ra = td[8];
            var dec = td[9];

            var show_category = false;
            var show_dropped = false;
            var show_neutrino = false;
            //put filter options here to determine show boolean

            //category filters
            if (category){
                var category_txt = category.textContent || category.innerText;
                if (sample1 && category_txt.includes("Sample 1")){
                    show_category=true;
                };
                if (sample2 && category_txt.includes("Sample 2")){
                    show_category=true;
                };
                if (badweather && category_txt.includes("Bad Weather")){
                    show_category=true;
                };
                if (calibrator && category_txt.includes("Calibrator")){
                    show_category=true;
                };
                if (other && !category_txt.includes("Sample") && !category_txt.includes("Sample 2") && !category_txt.includes("Bad Weather") && !category_txt.includes("Calibrator")){
                    show_category=true;
                };


                //check dropped status
                if (dropped_value==0) {
                    show_dropped=true;
                };
                if (dropped_value==1) {
                    if (category_txt.includes("Dropped")){
                        show_dropped=false;
                    } else {
                        show_dropped=true;
                    };
                };
                if (dropped_value==2) {
                    if (category_txt.includes("Dropped")){
                        show_dropped=true;
                    } else {
                        show_dropped=false;
                    };
                };

                //check neutrino status
                if (neutrino_value==0){
                    show_neutrino=true;
                };
                if (neutrino_value==1){
                    if (category_txt.includes("Neutrino")){
                        show_neutrino=false;
                    } else {
                        show_neutrino=true;
                    };
                };
                if (neutrino_value==2){
                    if (category_txt.includes("Neutrino")){
                        show_neutrino=true;
                    } else {
                        show_neutrino=false;
                    };
                };

            };

            //flux density filters
            
            //takes care of the lower/upper limit flux density filtering, returns boolean
            function FluxDensityFilter(average,low_lim,up_lim){
                var aver = average.textContent || average.innerText;
                aver = parseFloat(aver);
                var show_aver=false;

                //lower lim and upper lim filter set
                if(!isNaN(up_lim) && !isNaN(low_lim)){
                    if(!isNaN(aver)){
                        if(up_lim>aver && low_lim<aver){
                            show_aver=true;
                        };
                    };
                };

                //only up lim filter set
                if(!isNaN(up_lim) && isNaN(low_lim)){
                    if(!isNaN(aver)){
                        if(up_lim>aver){
                            show_aver=true;
                        };
                    };
                };

                //only low lim filter set
                if(!isNaN(low_lim) && isNaN(up_lim)){
                    if(!isNaN(aver)){
                        if(low_lim<aver){
                            show_aver=true;
                        };
                    };
                };

                //no filter set
                if(isNaN(up_lim) && isNaN(low_lim)){
                    show_aver=true;
                };
                return show_aver;
            };

            // execute flux density filters
            var show_aver_20 = FluxDensityFilter(aver_20mm,low_lim_20,up_lim_20);
            var show_aver_14 = FluxDensityFilter(aver_14mm,low_lim_14,up_lim_14);
            var show_aver_7 = FluxDensityFilter(aver_7mm,low_lim_7,up_lim_7);     

            //J2000 search string

            var show_j2000_search = false;
            console.log(search_j2000_name.length)
            if (search_j2000_name.length>0){
                var j2000_name_txt = j2000_name.textContent || j2000_name.innerText;
                if (j2000_name_txt.includes(search_j2000_name)){
                    show_j2000_search=true;
                } else {
                    show_j2000_search=false;
                };
            } else {
                show_j2000_search=true;
            };



            if (show_category && show_j2000_search && show_dropped && show_neutrino && show_aver_20 && show_aver_14 && show_aver_7){
                tr[i].style.display=""; //show entry
            } else {
                tr[i].style.display="none"; //hide entry                
            };
        };

    };

    //add eventlisteners to all form elements
    
    checkboxSample1.addEventListener('change', function(){updateTable()});
    checkboxSample2.addEventListener('change', function(){updateTable()});
    checkboxBadWeather.addEventListener('change', function(){updateTable()});
    checkboxCalibrator.addEventListener('change', function(){updateTable()});
    checkboxOther.addEventListener('change',function(){updateTable()});
    selectNeutrino.addEventListener('change', function(){updateTable()});
    selectDropped.addEventListener('change',function(){updateTable()});
    searchJ2000.addEventListener('keyup',function(){updateTable()});
    low_lim_20_form.addEventListener('keyup', function(){updateTable()});
    up_lim_20_form.addEventListener('keyup', function(){updateTable()});
    low_lim_14_form.addEventListener('keyup', function(){updateTable()});
    up_lim_14_form.addEventListener('keyup', function(){updateTable()});
    low_lim_7_form.addEventListener('keyup', function(){updateTable()});
    up_lim_7_form.addEventListener('keyup', function(){updateTable()});

    //updateTable();

} 

</script>