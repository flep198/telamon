<script>

function refSort (targetData, refData) {
  // Create an array of indices [0, 1, 2, ...N].
  var indices = Object.keys(refData);

  // Sort array of indices according to the reference data.
  indices.sort(function(indexA, indexB) {
    if (refData[indexA] < refData[indexB]) {
      return -1;
    } else if (refData[indexA] > refData[indexB]) {
      return 1;
    }
    return 0;
  });

  // Map array of indices to corresponding values of the target array.
  return indices.map(function(index) {
    return targetData[index];
  });
}


function updateSkyMap(date,redraw){

  //telescope coordinates
  lat=50.521497914;
  lon=6.876329828;

  //define arrays to store plot data
  tev_az=[];
  tev_alt=[];
  tev_name=[];
  extra_az=[];
  extra_alt=[];
  extra_name=[];
  follow_az=[];
  follow_alt=[];
  follow_name=[];
  look_az=[];
  look_alt=[];
  look_name=[];
  dropped_az=[];
  dropped_alt=[];
  dropped_name=[];
  circ_lim_az=[];
  circ_lim_alt=[];
  
  //calculate limit for circumpolarity
  if (lat>=0){
    declination_limit=90-Math.abs(lat)+10;
  } else {
    declination_limit=-90+Math.abs(lat)-10
  }

  for (i=0;i<=360;i++){
    altaz=AltAz(i,declination_limit,lat,lon,date);
    circ_lim_alt.push(altaz[0]);
    circ_lim_az.push(altaz[1]);
  }

  //get source coordinates
  <% Source.all.order("j2000_name").each do |source| %>
    <% @cat=""%>
    <% source.source_categories.each do |scat| %>
      <% if ['Sample 1','Sample 2','Sample 3','Sample 4'].include? scat.name %>
        <% @cat="tev" %>
      <% elsif ['Neutrino Follow-Up'].include? scat.name %>
        <% @cat="follow" %>        
      <% elsif ['Neutrino Look-Up'].include? scat.name %>
        <% @cat="look" %>
      <% elsif ['Extra Neutrino-Source'].include? scat.name %>
        <% @cat="extra" %>
      <% end %>
      <% if ['Dropped'].include? scat.name %>
        <% @cat="dropped" %>
      <% end %>
    <% end %>

    <% unless source.ra.nil? ||  @cat=="" %>
      <% ra=source.ra.split(":",3) %>
      <% decl=source.decl.split(":",3) %>
      <% ra_deg=ra[0].to_f/24*360+ra[1].to_f/24/60*360+ra[2].to_f/24/60/60*360%>
      <% decl_deg=decl[0].to_f+decl[1].to_f/60+ra[2].to_f/60/60%>
      altaz=AltAz(<%=ra_deg%>,<%=decl_deg%>,lat,lon,date);
      <%=@cat%>_az.push(altaz[1]);
      <%=@cat%>_alt.push(altaz[0]);
      <%=@cat%>_name.push('<%=source.j2000_name%>');
    <% end %>
  <% end %>





  var trace1 = {
    x: tev_az,
    y: tev_alt,
    mode: 'markers+text',
    type: 'scatter',
    name: 'TeV Sample',
    text: tev_name,
    textposition: 'top center',
    textfont: {
      family:  'Times New Roman'
    },
    marker: { size: 12 }
  };

  var trace2 = {
    x: extra_az,
    y: extra_alt,
    mode: 'markers+text',
    type: 'scatter',
    name: 'Extra Neutrino Sources',
    text: extra_name,
    textfont : {
      family:'Times New Roman'
    },
    textposition: 'bottom center',
    marker: { size: 12 }
  };

  var trace3 = {
    x: follow_az,
    y: follow_alt,
    mode: 'markers+text',
    type: 'scatter',
    name: 'Neutrino Follow Up',
    text: extra_name,
    textfont : {
      family:'Times New Roman'
    },
    textposition: 'bottom center',
    marker: { size: 12 }
  };

  var trace4 = {
    x: look_az,
    y: look_alt,
    mode: 'markers+text',
    type: 'scatter',
    name: 'Neutrino Look Up',
    text: look_name,
    textfont : {
      family:'Times New Roman'
    },
    textposition: 'bottom center',
    marker: { size: 12 }
  };

    var trace5 = {
    x: dropped_az,
    y: dropped_alt,
    mode: 'markers+text',
    type: 'scatter',
    name: 'Dropped',
    text: dropped_name,
    textfont : {
      family:'Times New Roman'
    },
    textposition: 'bottom center',
    marker: { size: 12 }
  };


  //trace for circum-polar limit
  var list = [];
  for (var j = 0; j < circ_lim_az.length; j++) 
    list.push({'circ_lim_az': circ_lim_az[j], 'circ_lim_alt': circ_lim_alt[j]});

  //2) sort:
  list.sort(function(a, b) {
    return ((a.circ_lim_az < b.circ_lim_az) ? -1 : ((a.circ_lim_az == b.circ_lim_az) ? 0 : 1));
    //Sort could be modified to, for example, sort on the age 
    // if the name is the same. See Bonus section below
  });

  //3) separate them back out:
  for (var k = 0; k < list.length; k++) {
      circ_lim_az[k] = list[k].circ_lim_az;
      circ_lim_alt[k] = list[k].circ_lim_alt;
  };


    var circ_lim = {
    x: circ_lim_az,
    y: circ_lim_alt,
    mode: 'lines',
    type: 'scatter',
    line: {
      dash: 'dot',
      width: 2,
    },
    showlegend: false,
    };

    //trace for circum-polar limit
    var horizon = {
    x: [0,10,20,30,40,50,60,70,80,90,100,110,120,
      130,140,150,160,170,180,190,200,210,220,230,240,
      250,260,270,280,290,300,310,320,330,340,350,360],
    y: [12.5,13,17,23.5,26,27.5,26,25.5,24.5,22,17,18,
      17,17.5,16,13,7.5,5,7.5,8.5,13.5,14,14,12.5,
      12.5,11,9,17,21.5,18,21.5,19,18,17.5,7,10,12.5],
    mode: 'lines',
    type: 'scatter',
    showlegend: false,
  };

  var data = [ trace1, trace2 , trace3, trace4, trace5, circ_lim, horizon ];

  var layout = {
    width: $(window).width()*0.8,
    height: $(window).height()*0.8,
    xaxis: {
      range: [ 0, 360 ]
    },
    yaxis: {
      range: [0, 90]
    },
    legend: {
      y: 0.5,
      yref: 'paper',
      font: {
        family: 'Arial, sans-serif',
        size: 20,
        color: 'grey',
      }
    },
    title:'Effelsberg Skyplot'
  };

  if (redraw){
  Plotly.newPlot('skyplot', data, layout);
  } else {
  Plotly.redraw('skyplot');
  }
}

updateSkyMap(new Date(),true);

setInterval(function(){updateSkyMap(new Date(),false)},10000);

</script>