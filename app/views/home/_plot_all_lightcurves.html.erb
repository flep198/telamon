<!--NEED TO FIX ERROR WITH + IN J2000 NAME -->

<!--creates plot with input data array (columns: MJD, Value, minValue, maxValue, true/false)-->
<script>


//make sure export button works

function download_table_as_csv(table_id, separator = ',') {
    // Select rows from table_id
    var rows = document.querySelectorAll('table#' + table_id + ' tr');
    // Construct csv
    var csv = [];
    for (var i = 0; i < rows.length; i++) {
        var row = [], cols = rows[i].querySelectorAll('td, th');
        for (var j = 0; j < cols.length; j++) {
            // Clean innertext to remove multiple spaces and jumpline (break csv)
            var data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ')
            // Escape double-quote with double-double-quote (see https://stackoverflow.com/questions/17808511/properly-escape-a-double-quote-in-csv)
            data = data.replace(/"/g, '""');
            // Push escaped string
            row.push('"' + data + '"');
        }
        csv.push(row.join(separator));
    }
    var csv_string = csv.join('\n');
    // Download it
    var filename = table_id + '.csv';
    var link = document.createElement('a');
    link.style.display = 'none';
    link.setAttribute('target', '_blank');
    link.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv_string));
    link.setAttribute('download', filename);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

window.onload=function(){


  // make sure export button works
  if(!!document.getElementById("export_button")){
        var table_name = document.getElementById("export_button").dataset.table;
        document.getElementById("export_button").addEventListener("click", function(){download_table_as_csv(table_name)});
  }


  //make tables sortable
    const getCellValue = (tr, idx) => tr.children[idx].innerText || tr.children[idx].textContent;

    const comparer = (idx, asc) => (a, b) => ((v1, v2) => 
        v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ? v1 - v2 : v1.toString().localeCompare(v2)
        )(getCellValue(asc ? a : b, idx), getCellValue(asc ? b : a, idx));

    document.querySelectorAll('th').forEach(th => th.addEventListener('click', (() => {
        const table = th.closest('table');
        const tbody = table.querySelector('tbody');
        Array.from(tbody.querySelectorAll('tr'))
            .sort(comparer(Array.from(th.parentNode.children).indexOf(th), this.asc = !this.asc))
            .forEach(tr => tbody.appendChild(tr) );
    })));


  
  <% sources_to_plot.each do |source| %>
  //LIGHTCURVE PLOT

    freq_array<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%> = []; // this array saves what freqs will be plotted later
    aver_mode_array<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%> = []; //this array saves data to plot in aver mode

    //query database
    <% source.frequencies.distinct.order(:freq_ghz).each do |freq| %>
      <% @freq_id=freq.id %>
      <% @data = Result.where(:source_id => source.id, :frequency_id => @freq_id).map { |r| [r.mjd,r.value_jy,r.error_jy]} %>
      <% @data=@data.sort_by(&:first) %>

        //print out values for freq
      var lc_data<%=@freq_id%><%=source.j2000_name.gsub("+","plus").gsub("-","minus")%> = {
        x: <%= @data.map {|r| r[0]}%>,
        y: <%= @data.map {|r| r[1]}%>,
        error_y: {
          type: "data",
          array: <%= @data.map {|r| r[2]}%>,
          visible: true
        },
        type: "scatter",
        <% if !user_signed_in?%>
        hoverinfo: 'none',
        <%end%>
        name: "<%=Frequency.find(@freq_id).freq_ghz.to_s%> GHz"
      };

      freq_array<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%>.push(lc_data<%=@freq_id%><%=source.j2000_name.gsub("+","plus").gsub("-","minus")%>);

    <% end %>

    var layoutLC<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%> = {
      title: "<%=source.j2000_name%>",

      xaxis: {
        title: {
          text: 'MJD',
          font: {
            family: 'Courier New, monospace',
            size: 18,
            color: '#7f7f7f'
          }
        },
      },

      yaxis: {
        title: {
          text: 'Flux Density [Jy]',
          font: {
            family: 'Courier New, monospace',
            size: 18,
            color: '#7f7f7f'
          }
        },
      },

    };

    //averaged lightcurves
    <% lc7=getAverageLightCurve(source,36,44) %>
    var aver_lc7<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%> = {
      x: <%= lc7[0] %>,
      y: <%= lc7[1] %>,
      error_y: {
          type: "data",
          array: <%= lc7[2] %>,
          visible: true
        },
      type: "scatter",
      name: "Aver 7mm"
    };
    aver_mode_array<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%>.push(aver_lc7<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%>);

    <% lc14=getAverageLightCurve(source,19,25) %>
    var aver_lc14<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%> = {
      x: <%= lc14[0] %>,
      y: <%= lc14[1] %>,
      error_y: {
          type: "data",
          array: <%= lc14[2] %>,
          visible: true
        },
      type: "scatter",
      name: "Aver 14mm"
    };
    aver_mode_array<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%>.push(aver_lc14<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%>);

    <% lc20=getAverageLightCurve(source,14,17) %>
    var aver_lc20<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%> = {
      x: <%= lc20[0] %>,
      y: <%= lc20[1] %>,
      error_y: {
          type: "data",
          array: <%= lc20[2] %>,
          visible: true
        },
      type: "scatter",
      name: "Aver 20mm"
    };
    aver_mode_array<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%>.push(aver_lc20<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%>);

    Plotly.newPlot("lightcurve<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%>",freq_array<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%>,layoutLC<%=source.j2000_name.gsub("+","plus").gsub("-","minus")%>);

  <%end%>

  var checkboxAver = document.getElementById("averSwitch");

  function updateLCplot(){
    var aver = checkboxAver.checked;

    <% sources_to_plot.each do |renew_source| %>

      if (aver){
        Plotly.newPlot("lightcurve<%=renew_source.j2000_name.gsub("+","plus").gsub("-","minus")%>",aver_mode_array<%=renew_source.j2000_name.gsub("+","plus").gsub("-","minus")%>,layoutLC<%=renew_source.j2000_name.gsub("+","plus").gsub("-","minus")%>);
      } else {
        Plotly.newPlot("lightcurve<%=renew_source.j2000_name.gsub("+","plus").gsub("-","minus")%>",freq_array<%=renew_source.j2000_name.gsub("+","plus").gsub("-","minus")%>,layoutLC<%=renew_source.j2000_name.gsub("+","plus").gsub("-","minus")%>);
      };

    <%end%>

  };
  
  checkboxAver.addEventListener('change',function(){updateLCplot()});

  updateLCplot();
 

}
</script>